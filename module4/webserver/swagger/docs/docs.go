// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/get/{petID}": {
            "get": {
                "description": "Get Pet by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "get pet by ID",
                "operationId": "pet-get-by-id-handler",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "petID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pet.Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                }
            },
            "delete": {
                "description": "Delete Pet by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "get delete by ID",
                "operationId": "pet-delete-by-id-handler",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "petID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                }
            }
        },
        "/pet": {
            "put": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "operationId": "pet-put-update-handler",
                "parameters": [
                    {
                        "description": "Pet object that needs to be added to the store",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pet.Pet"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "post": {
                "description": "Create Pet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "create new pet",
                "operationId": "pet-create-handler",
                "parameters": [
                    {
                        "description": "Pet data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/pet.Pet"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pet.Pet"
                        }
                    },
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/pet/findByStatus": {
            "get": {
                "description": "Multiple status values can be provided with comma separated strings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "Find Pets by status",
                "operationId": "pet-find-by-status-handler",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Status values that need to be considered for filter Available values : available, pending, sold",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/pet.Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                }
            }
        },
        "/pet/{petID}": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Updates a petin the store with form data",
                "operationId": "pet-update-handler",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet that needs to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Updated name of the pet",
                        "name": "name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Updated status of the pet",
                        "name": "status",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                }
            }
        },
        "/pet/{petID}/uploadImage": {
            "post": {
                "description": "Create Pet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pet"
                ],
                "summary": "uploads an image",
                "operationId": "pet-upload-handler",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "petID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Pet data",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/pet.uploadResponse"
                        }
                    }
                }
            }
        },
        "/store/order": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "operationId": "create-order-handler",
                "parameters": [
                    {
                        "description": "order placed for purchasing the pet",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/store.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/store.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/store/order/inventory": {
            "get": {
                "description": "Returns a map of status codes to quantities",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Returns pet inventories by status",
                "operationId": "get-inventory-handler",
                "responses": {
                    "200": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/store/order/{orderID}": {
            "get": {
                "description": "For valid response try integer IDs with value \u003e= 1 and \u003c= 10. Other values will generated exceptions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "operationId": "get-order-handler",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet that needs to be fetched",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/store.Order"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "operationId": "delete-order-handler",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID of pet that needs to be deleted",
                        "name": "orderID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "This can only be done by the logged in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "operationId": "user-create-handler",
                "parameters": [
                    {
                        "description": "Created user object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Pet not found"
                    },
                    "default": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "description": "This can only be done by the logged in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create with list user",
                "operationId": "user-create-with-list-handler",
                "parameters": [
                    {
                        "description": "List of user object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.User"
                            }
                        }
                    }
                ],
                "responses": {
                    "404": {
                        "description": "Pet not found"
                    },
                    "default": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/{Username}": {
            "get": {
                "description": "This can only be done by the logged in user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user",
                "operationId": "user-get-by-username-handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name that needs to be fetched",
                        "name": "Username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "description": "This can only be done by the logged in user.",
                "tags": [
                    "user"
                ],
                "summary": "Update user",
                "operationId": "user-update-by-username-handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name that needs to be updated",
                        "name": "Username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated user object",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "post": {
                "description": "This can only be done by the logged in user.",
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "operationId": "user-delete-by-username-handler",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name that needs to be deleted",
                        "name": "Username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "pet.Category": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "pet.Pet": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/pet.Category"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "photoUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/pet.Category"
                    }
                }
            }
        },
        "pet.uploadResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "store.Order": {
            "type": "object",
            "properties": {
                "complete": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "petId": {
                    "type": "integer"
                },
                "quantity": {
                    "type": "integer"
                },
                "shipDate": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "user.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Rest API",
	Description:      "copy of the swagger PetStore",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

basePath: /
definitions:
  pet.Category:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  pet.Pet:
    properties:
      category:
        $ref: '#/definitions/pet.Category'
      id:
        type: integer
      name:
        type: string
      photoUrls:
        items:
          type: string
        type: array
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/pet.Category'
        type: array
    type: object
  pet.uploadResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      type:
        type: string
    type: object
  store.Order:
    properties:
      complete:
        type: boolean
      id:
        type: integer
      petId:
        type: integer
      quantity:
        type: integer
      shipDate:
        type: string
      status:
        type: string
    type: object
  user.User:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: copy of the swagger PetStore
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Swagger Rest API
  version: "1.0"
paths:
  /get/{petID}:
    delete:
      description: Delete Pet by ID
      operationId: pet-delete-by-id-handler
      parameters:
      - description: petID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      summary: get delete by ID
      tags:
      - pet
    get:
      description: Get Pet by ID
      operationId: pet-get-by-id-handler
      parameters:
      - description: petID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pet.Pet'
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      summary: get pet by ID
      tags:
      - pet
  /pet:
    post:
      description: Create Pet
      operationId: pet-create-handler
      parameters:
      - description: Pet data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pet.Pet'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pet.Pet'
        "405":
          description: Invalid input
      summary: create new pet
      tags:
      - pet
    put:
      operationId: pet-put-update-handler
      parameters:
      - description: Pet object that needs to be added to the store
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/pet.Pet'
      produces:
      - application/json
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      summary: Update an existing pet
      tags:
      - pet
  /pet/{petID}:
    post:
      operationId: pet-update-handler
      parameters:
      - description: ID of pet that needs to be updated
        in: path
        name: id
        required: true
        type: integer
      - description: Updated name of the pet
        in: formData
        name: name
        type: string
      - description: Updated status of the pet
        in: formData
        name: status
        type: string
      responses:
        "405":
          description: Invalid input
      summary: Updates a petin the store with form data
      tags:
      - pet
  /pet/{petID}/uploadImage:
    post:
      description: Create Pet
      operationId: pet-upload-handler
      parameters:
      - description: petID
        in: path
        name: id
        required: true
        type: integer
      - description: Pet data
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pet.uploadResponse'
      summary: uploads an image
      tags:
      - pet
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: pet-find-by-status-handler
      parameters:
      - collectionFormat: csv
        description: 'Status values that need to be considered for filter Available
          values : available, pending, sold'
        in: query
        items:
          type: string
        name: status
        required: true
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pet.Pet'
            type: array
        "400":
          description: Invalid status value
      summary: Find Pets by status
      tags:
      - pet
  /store/order:
    post:
      operationId: create-order-handler
      parameters:
      - description: order placed for purchasing the pet
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/store.Order'
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/store.Order'
        "400":
          description: Invalid Order
      summary: Place an order for a pet
      tags:
      - store
  /store/order/{orderID}:
    delete:
      description: For valid response try integer IDs with positive integer value.
        Negative or non-integer values will generate API errors
      operationId: delete-order-handler
      parameters:
      - description: ID of pet that needs to be deleted
        in: path
        name: orderID
        required: true
        type: integer
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Place an order for a pet
      tags:
      - store
    get:
      description: For valid response try integer IDs with value >= 1 and <= 10. Other
        values will generated exceptions
      operationId: get-order-handler
      parameters:
      - description: ID of pet that needs to be fetched
        in: path
        name: orderID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/store.Order'
        "400":
          description: Invalid Order
        "404":
          description: Order not found
      summary: Place an order for a pet
      tags:
      - store
  /store/order/inventory:
    get:
      description: Returns a map of status codes to quantities
      operationId: get-inventory-handler
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
      summary: Returns pet inventories by status
      tags:
      - store
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: user-create-handler
      parameters:
      - description: Created user object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "404":
          description: Pet not found
        default:
          description: successful operation
          schema:
            type: string
      summary: Create user
      tags:
      - user
  /user/{Username}:
    get:
      description: This can only be done by the logged in user.
      operationId: user-get-by-username-handler
      parameters:
      - description: The name that needs to be fetched
        in: path
        name: Username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user
      tags:
      - user
    post:
      description: This can only be done by the logged in user.
      operationId: user-delete-by-username-handler
      parameters:
      - description: The name that needs to be deleted
        in: path
        name: Username
        required: true
        type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
      - user
    put:
      description: This can only be done by the logged in user.
      operationId: user-update-by-username-handler
      parameters:
      - description: The name that needs to be updated
        in: path
        name: Username
        required: true
        type: string
      - description: Updated user object
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.User'
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Update user
      tags:
      - user
  /user/createWithList:
    post:
      description: This can only be done by the logged in user.
      operationId: user-create-with-list-handler
      parameters:
      - description: List of user object
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/user.User'
          type: array
      produces:
      - application/json
      responses:
        "404":
          description: Pet not found
        default:
          description: successful operation
          schema:
            type: string
      summary: Create with list user
      tags:
      - user
swagger: "2.0"
